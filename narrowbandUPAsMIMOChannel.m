function H=narrowbandUPAsMIMOChannel(numTx_az,numTx_el,numRx_az,numRx_el,normalizedSpacingTx,...
    normalizedSpacingRx,AoA_az,AoD_az,AoA_el,AoD_el,complexGains)
%Using information from each ray (that can be obtained from the
%complex impulse response and path file generated by InSite, NYUSIM, etc.),
%compute the H matrix using the geometric channel model.
%All angles are in radian and gains in Watts in linear scale (not dB).
%Assumes ULA. The elevation angles are not taken in account.
%As in Tse's book, the AoA and AoD are between the ray and the line
%formed by the ULA (not with its normal).
%Normalized spacing is the distance among antenna elements divided by the
%wavelength.
%delta_axis is the angle difference among x axis and ula axis
%See 6.10 from Antenna Theory Analysis and Design - Balanis
%Wireless InSite: Azimuth[-pi,pi] Elevation[0,pi]

L=length(complexGains); % number of rays

% Array factor for UPA at XZ plane (X - Azimuth , Z - Elevation)
SteeringVectorTx_az= sin(deg2rad(AoD_el)).*cos(deg2rad(AoD_az));
SteeringVectorTx_el= cos(deg2rad(AoD_el));

SteeringVectorRx_az= sin(deg2rad(AoA_el)).*cos(deg2rad(AoA_az));
SteeringVectorRx_el= cos(deg2rad(AoA_el));

% % Array factor for UPA at YZ plane (Y - Azimuth , Z - Elevation)
% SteeringVectorTx_az= sin(deg2rad(AoD_el)).*sin(deg2rad(AoD_az));
% SteeringVectorTx_el= cos(deg2rad(AoD_el));
% 
% SteeringVectorRx_az= sin(deg2rad(AoA_el)).*sin(deg2rad(AoA_az));
% SteeringVectorRx_el= cos(deg2rad(AoA_el));

numRx = numRx_az*numRx_el;
numTx = numTx_az*numTx_el;

H=zeros(numRx,numTx); %initialize
for thisPath=1:L
    txsignature_az=unitSpatialSignature(SteeringVectorTx_az(thisPath),normalizedSpacingTx,numTx_az);
    txsignature_el=unitSpatialSignature(SteeringVectorTx_el(thisPath),normalizedSpacingTx,numTx_el);
    rxsignature_az=unitSpatialSignature(SteeringVectorRx_az(thisPath),normalizedSpacingRx,numRx_az);
    rxsignature_el=unitSpatialSignature(SteeringVectorRx_el(thisPath),normalizedSpacingRx,numRx_el);
    
    %Kronecker Product
    %Order of Antenna Element follow elevation axis and after azimuth axis
    txsignature = kron(txsignature_az,txsignature_el);
    rxsignature = kron(rxsignature_az,rxsignature_el);
    
    %Eq. (7.56) in Tse's book but not incorporating the phase
    %Note the Hermitian operator ' changes the signs of angles in Tx
    newH=sqrt(numRx*numTx)*complexGains(thisPath)*rxsignature*txsignature';
    H= H + newH;
    %There is only one non-zero SVD for a single ray, and two for
    %properly spaced two rays
    %[~,singularValues,~]=svd(H);
    %diag(singularValues)
end
end